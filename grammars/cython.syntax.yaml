---
name: Cython
scopeName: source.cython
fileTypes: [pyx, pxd, pxi]
firstLineMatch: ^#cython
patterns:
  - include: "#statement"
  - include: "#expression"

repository:
  statement:
    patterns:
      - include: "#import"
      - include: "#for-from"
      - include: "#class-declaration"
      - include: "#function-declaration"
      - include: "source.python#statement"

  expression:
    patterns:
      - include: "#literal"
      - include: "#special-operators"
      - include: "#illegal-names"
      - include: "#expression-base"
      - include: "source.python#member-access"

  expression-bare:
    comment: valid Python expressions w/o comments and line continuation
    patterns:
      - include: "#illegal-names"
      - include: "#cast"
      - include: "source.python#expression-bare"

  expression-base:
    comment: valid Python expressions with comments and line continuation
    patterns:
      - include: "source.python#comments"
      - include: "#expression-bare"
      - include: "source.python#line-continuation"

  import:
    comment: |
      Import statements used to correctly mark `from`, `cimport`, and `as`
    patterns:
      - begin: \b(?<!\.)(from)\b(?=.+cimport)
        end: $|(?=cimport)
        beginCaptures:
          "1": { name: keyword.control.import.cython }
        patterns:
          - name: punctuation.separator.period.cython
            match: \.+
          - include: "#expression"

      - begin: \b(?<!\.)(cimport)\b
        end: $
        beginCaptures:
          "1": { name: keyword.control.import.cython }
        patterns:
          - name: keyword.control.import.cython
            match: \b(?<!\.)as\b
          - include: "#expression"

  literal:
    patterns:
      - name: constant.language.cython
        match: \b(NULL)\b
      - include: "source.python#literal"

  illegal-names:
    patterns:
      - include: "source.python#illegal-names"
      - match: |
          (?x)
            \b(?:
              (
                nogil | gil | include | extern | extern from | noexcept | namespace
              ) | (
                as | cimport
              ) | (
                cdef | cpdef | ctypedef | DEF | IF | ELSE | ELIF
              ) | (
                const | unsigned | signed | new | readonly | inline | public | cppclass | packed(?=\s+struct)
              )
            )\b
        captures:
          "1": { name: keyword.control.flow.cython }
          "2": { name: keyword.control.import.cython }
          "3": { name: storage.type.declaration.cython }
          "4": { name: storage.type.modifiers.cython }

  for-from:
    comment: |
      Match "for ... from ... by" construct
    begin: \bfor\b
    beginCaptures:
      '0': {name: keyword.control.flow.cython}
    end: $
    patterns:
      - match: '\bfrom\b'
        captures:
          '0': {name: keyword.control.flow.cython}
      - match: '\bby\b'
        captures:
          '0': {name: keyword.control.flow.cython}
      - include: '#expression'

  special-operators:
    patterns:
      - name: keyword.operator.special.cython
        match: '\?'

  class-name:
    patterns:
      - include: "source.python#illegal-object-name"
      - include: "source.python#builtin-possible-callables"
      - name: entity.name.type.class.cython
        match: |
          (?x)
            \b ([[:alpha:]_]\w*) \b

  class-declaration:
    comment: "cdef class ClassName()"
    patterns:
      - name: meta.class.cython
        begin: |
          (?x)
            \s*(cdef\s+class)\s+
              (?=
                [[:alpha:]_]\w* \s* (:|\()?
              )
        end: (:|(?=[#'"\n]))
        beginCaptures:
          "1": { name: storage.type.class.cython }
        endCaptures:
          "1": { name: punctuation.section.class.begin.cython }
        patterns:
          - include: "#class-name"
          - include: "source.python#class-inheritance"

  function-declaration:
    name: meta.function.cython
    patterns:
      - include: "#illegal-names"
      - match: |
          (?x)
            (?:def|cdef|cpdef)\s+
            (?:
              (\b[[:alpha:]_][\w\.]*\b)
                (\[[:\d\,]*\])?
                  (?:\*+\s|\s\*+|\s)?
            )?
              ([[:alpha:]_]\w*(\())
        captures:
          "1": { name: support.type.cython } # TODO: Don't highlight?
          "2": { name: punctuation.section.view.cython }
          "3": { name: entity.name.function.cython }
          "4": { name: punctuation.section.function.begin.cython }
      - include: "#function-declaration-def"

  function-declaration-def:
    name: meta.function.python
    begin: |
      (?x)
        \s*
        (?:\b(async) \s+)? \b(def)\s+
          (?=
            [[:alpha:]_][[:word:]]* \s* \(
          )

    end: (:|(?=[#'"\n]))
    beginCaptures:
      "1": { name: storage.type.function.async.cython }
      "2": { name: storage.type.function.cython }

    endCaptures:
      "1": { name: punctuation.section.function.begin.cython }

    patterns:
      - include: "#illegal-names"
      - include: "source.python#function-def-name"
      - include: "source.python#parameters"
      - include: "source.python#line-continuation"
      - include: "source.python#return-annotation"
